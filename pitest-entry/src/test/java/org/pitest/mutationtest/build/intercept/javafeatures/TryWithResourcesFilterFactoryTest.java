package org.pitest.mutationtest.build.intercept.javafeatures;

import com.example.trywithresources.NoThrowAutoClosableResource;
import com.example.trywithresources.SimpleCloseCall;
import com.example.trywithresources.TryWithResourcesNoThrow;
import org.junit.Test;
import org.pitest.classinfo.ClassName;
import org.pitest.mutationtest.engine.gregor.mutators.NullMutateEverything;
import org.pitest.verifier.interceptors.InterceptorVerifier;
import org.pitest.verifier.interceptors.VerifierStart;
import twr.example6.TryWithNestedTryExample;

import java.io.ByteArrayOutputStream;

import static org.pitest.bytecode.analysis.InstructionMatchers.methodCallTo;

public class TryWithResourcesFilterFactoryTest {

    InterceptorVerifier v = VerifierStart.forInterceptorFactory(new TryWithResourcesFilterFactory())
            .usingMutator(new NullMutateEverything());

    @Test
    public void filtersAutoGeneratedCloseMethods() {
        v.forClass(TryWithResourcesNoThrow.class)
                .forCodeMatching(methodCallTo(ClassName.fromClass(NoThrowAutoClosableResource.class), "close").asPredicate())
                .mutantsAreGenerated()
                .allMutantsAreFiltered()
                .verify();
    }

    @Test
    public void doesNotFilterManualCloseCalls() {
        v.forClass(SimpleCloseCall.class)
                .forCodeMatching(methodCallTo(ClassName.fromClass(ByteArrayOutputStream.class), "close").asPredicate())
                .mutantsAreGenerated()
                .noMutantsAreFiltered()
                .verify();

    }

    @Test
    public void doesNotFilterUserCode() {
        v.forClass(TryWithResourcesNoThrow.class)
                .forCodeMatching(methodCallTo(ClassName.fromClass(ThreadLocal.class), "remove").asPredicate())
                .mutantsAreGenerated()
                .noMutantsAreFiltered()
                .verify();

    }

    @Test
    public void filtersAddSuppressed() {
        // using TryWithNestedTryExample here just for variety, not essential to the test
        v.forClass(TryWithNestedTryExample.class)
                .forCodeMatching(methodCallTo(ClassName.fromClass(Throwable.class), "addSuppressed").asPredicate())
                .mutantsAreGenerated()
                .allMutantsAreFiltered()
                .verify();

    }

}